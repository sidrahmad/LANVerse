import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, Wifi, Users, Lock, Unlock, Plus, ArrowLeft, Gamepad2, MessageSquare, Share as FileShare, Mic, RefreshCw } from 'lucide-react';
import { Room, User, RoomService } from '../types';
import { useP2PNetwork } from '../hooks/useP2PNetwork';
import NetworkStatus from './NetworkStatus';

interface RoomDiscoveryProps {
  onJoinRoom: (room: Room) => void;
}

const RoomDiscovery: React.FC<RoomDiscoveryProps> = ({ onJoinRoom }) => {
  const [rooms, setRooms] = useState<Room[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [showCreateRoom, setShowCreateRoom] = useState(false);
  const { 
    isConnected, 
    peers, 
    isDiscovering, 
    sendMessage, 
    createRoom,
    environment 
  } = useP2PNetwork();

  // Listen for room announcements from peers
  useEffect(() => {
    const handleSystemMessage = (event: CustomEvent) => {
      const message = event.detail;
      if (message.data.action === 'room_created') {
        const newRoom: Room = {
          id: message.data.roomId,
          name: message.data.roomName,
          description: 'P2P Room discovered on LAN',
          host: { 
            id: message.from, 
            name: `Host_${message.from.slice(-4)}`, 
            avatar: '👑', 
            status: 'online', 
            joinedAt: new Date() 
          },
          users: [{ 
            id: message.from, 
            name: `Host_${message.from.slice(-4)}`, 
            avatar: '👑', 
            status: 'online', 
            joinedAt: new Date() 
          }],
          maxUsers: 8,
          services: [
            { type: 'chat', enabled: true, port: 8001 },
            { type: 'voice', enabled: true, port: 8002 },
            { type: 'file', enabled: true, port: 8003 }
          ],
          created: new Date(),
          isPrivate: message.data.isPrivate
        };
        
        setRooms(prev => {
          const existing = prev.find(r => r.id === newRoom.id);
          if (existing) return prev;
          return [...prev, newRoom];
        });
      }
    };

    window.addEventListener('p2p-system-message', handleSystemMessage as EventListener);
    return () => {
      window.removeEventListener('p2p-system-message', handleSystemMessage as EventListener);
    };
  }, []);

  // Generate demo rooms based on connected peers
  useEffect(() => {
    if (peers.length > 0) {
      const peerRooms: Room[] = peers.map((peer, index) => ({
        id: peer.id,
        name: `${peer.id.slice(-8)}'s Room`,
        description: `P2P room hosted by ${peer.id}`,
        host: { 
          id: peer.id, 
          name: `User_${peer.id.slice(-4)}`, 
          avatar: ['🎮', '📁', '🎨', '💻', '🚀'][index % 5], 
          status: 'online', 
          joinedAt: new Date() 
        },
        users: [{ 
          id: peer.id, 
          name: `User_${peer.id.slice(-4)}`, 
          avatar: ['🎮', '📁', '🎨', '💻', '🚀'][index % 5], 
          status: 'online', 
          joinedAt: new Date() 
        }],
        maxUsers: 8,
        services: peer.services.map(service => ({
          type: service as RoomService['type'],
          enabled: true,
          port: 8000 + index
        })),
        created: new Date(),
        isPrivate: Math.random() > 0.7
      }));

      setRooms(prev => {
        const newRooms = peerRooms.filter(newRoom => 
          !prev.some(existingRoom => existingRoom.id === newRoom.id)
        );
        return [...prev, ...newRooms];
      });
    }
  }, [peers]);

  const handleCreateRoom = async (roomName: string, isPrivate: boolean) => {
    try {
      const roomId = await createRoom(roomName, isPrivate);
      setShowCreateRoom(false);
      
      // Create local room object
      const newRoom: Room = {
        id: roomId,
        name: roomName,
        description: 'Your P2P room',
        host: { 
          id: 'local', 
          name: 'You', 
          avatar: '👑', 
          status: 'online', 
          joinedAt: new Date() 
        },
        users: [{ 
          id: 'local', 
          name: 'You', 
          avatar: '👑', 
          status: 'online', 
          joinedAt: new Date() 
        }],
        maxUsers: 8,
        services: [
          { type: 'chat', enabled: true, port: 8001 },
          { type: 'voice', enabled: true, port: 8002 },
          { type: 'file', enabled: true, port: 8003 }
        ],
        created: new Date(),
        isPrivate
      };
      
      onJoinRoom(newRoom);
    } catch (error) {
      console.error('Failed to create room:', error);
    }
  };

  const filteredRooms = rooms.filter(room => 
    room.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    room.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getServiceIcon = (service: RoomService) => {
    switch (service.type) {
      case 'chat': return MessageSquare;
      case 'voice': return Mic;
      case 'file': return FileShare;
      case 'game': return Gamepad2;
      default: return MessageSquare;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <motion.div 
          className="flex items-center justify-between mb-8"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <div className="flex items-center">
            <motion.button
              className="mr-4 p-2 text-slate-400 hover:text-white transition-colors"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
            >
              <ArrowLeft className="h-6 w-6" />
            </motion.button>
            <div>
              <h1 className="text-3xl font-bold text-white">P2P Room Discovery</h1>
              <p className="text-slate-400">
                {environment ? `Connected to ${environment.localNetwork.subnet}` : 'Detecting network...'}
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-4">
            <motion.button
              disabled={isDiscovering || !isConnected}
              className="flex items-center px-4 py-2 bg-blue-500/20 text-blue-300 rounded-lg hover:bg-blue-500/30 transition-colors disabled:opacity-50"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <RefreshCw className={`h-4 w-4 mr-2 ${isDiscovering ? 'animate-spin' : ''}`} />
              {isDiscovering ? 'Scanning LAN...' : 'Refresh'}
            </motion.button>
            
            <motion.button
              onClick={() => setShowCreateRoom(true)}
              disabled={!isConnected}
              className="flex items-center px-4 py-2 bg-green-500/20 text-green-300 rounded-lg hover:bg-green-500/30 transition-colors disabled:opacity-50"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Plus className="h-4 w-4 mr-2" />
              Host Room
            </motion.button>
          </div>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Network Status Sidebar */}
          <div className="lg:col-span-1">
            <NetworkStatus />
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3">
            {/* Search Bar */}
            <motion.div 
              className="relative mb-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
            >
              <div className="relative">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-slate-400" />
                <input
                  type="text"
                  placeholder="Search P2P rooms..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-12 pr-4 py-3 bg-slate-800/50 backdrop-blur-sm border border-slate-700/50 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:border-blue-500/50 focus:ring-1 focus:ring-blue-500/20"
                />
              </div>
            </motion.div>

            {/* Connection Status */}
            {!isConnected && (
              <motion.div
                className="flex items-center justify-center py-12 mb-6"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
              >
                <div className="text-center">
                  <Wifi className="h-16 w-16 text-slate-600 mx-auto mb-4" />
                  <h3 className="text-xl font-semibold text-slate-400 mb-2">Connecting to Network</h3>
                  <p className="text-slate-500">
                    Initializing P2P networking and discovering local peers...
                  </p>
                </div>
              </motion.div>
            )}

            {/* Rooms Grid */}
            {isConnected && (
              <motion.div 
                className="grid md:grid-cols-2 gap-4"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.2 }}
              >
                {filteredRooms.map((room, index) => (
                  <motion.div
                    key={room.id}
                    className="group relative bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700/50 hover:border-blue-500/50 transition-all duration-300 cursor-pointer"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    whileHover={{ y: -5 }}
                    onClick={() => onJoinRoom(room)}
                  >
                    {/* Room Header */}
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center">
                        <div className="w-3 h-3 bg-green-400 rounded-full mr-3 animate-pulse" />
                        <h3 className="text-lg font-semibold text-white group-hover:text-blue-300 transition-colors">
                          {room.name}
                        </h3>
                      </div>
                      {room.isPrivate ? (
                        <Lock className="h-5 w-5 text-orange-400" />
                      ) : (
                        <Unlock className="h-5 w-5 text-green-400" />
                      )}
                    </div>

                    {/* Room Description */}
                    <p className="text-slate-300 mb-4 text-sm">{room.description}</p>

                    {/* Room Stats */}
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center text-slate-400">
                        <Users className="h-4 w-4 mr-1" />
                        <span className="text-sm">{room.users.length}/{room.maxUsers}</span>
                      </div>
                      <div className="flex items-center text-slate-400">
                        <span className="text-sm">Host: {room.host.name}</span>
                      </div>
                    </div>

                    {/* Services */}
                    <div className="flex flex-wrap gap-2 mb-4">
                      {room.services.filter(s => s.enabled).map((service, i) => {
                        const Icon = getServiceIcon(service);
                        return (
                          <div key={i} className="flex items-center px-2 py-1 bg-blue-500/20 text-blue-300 rounded text-xs">
                            <Icon className="h-3 w-3 mr-1" />
                            {service.type}
                          </div>
                        );
                      })}
                    </div>

                    {/* User Avatars */}
                    <div className="flex -space-x-2">
                      {room.users.slice(0, 5).map((user, i) => (
                        <div key={i} className="w-8 h-8 bg-slate-700 rounded-full flex items-center justify-center text-sm border-2 border-slate-800">
                          {user.avatar}
                        </div>
                      ))}
                      {room.users.length > 5 && (
                        <div className="w-8 h-8 bg-slate-600 rounded-full flex items-center justify-center text-xs text-slate-300 border-2 border-slate-800">
                          +{room.users.length - 5}
                        </div>
                      )}
                    </div>

                    {/* Hover Overlay */}
                    <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 to-purple-500/5 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                  </motion.div>
                ))}
              </motion.div>
            )}

            {/* Empty State */}
            {isConnected && filteredRooms.length === 0 && (
              <motion.div
                className="text-center py-16"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
              >
                <Wifi className="h-16 w-16 text-slate-600 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-slate-400 mb-2">No P2P Rooms Found</h3>
                <p className="text-slate-500 mb-6">
                  {searchTerm ? 'No rooms match your search.' : 'No active rooms detected on the local network.'}
                </p>
                <motion.button
                  onClick={() => setShowCreateRoom(true)}
                  className="px-6 py-3 bg-green-500/20 text-green-300 rounded-lg hover:bg-green-500/30 transition-colors"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  Host the First Room
                </motion.button>
              </motion.div>
            )}
          </div>
        </div>

        {/* Create Room Modal */}
        <AnimatePresence>
          {showCreateRoom && (
            <motion.div
              className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <motion.div
                className="bg-slate-800 rounded-xl p-6 w-full max-w-md mx-4"
                initial={{ scale: 0.9, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.9, opacity: 0 }}
              >
                <h3 className="text-xl font-bold text-white mb-4">Create P2P Room</h3>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target as HTMLFormElement);
                  const roomName = formData.get('roomName') as string;
                  const isPrivate = formData.get('isPrivate') === 'on';
                  handleCreateRoom(roomName, isPrivate);
                }}>
                  <div className="mb-4">
                    <label className="block text-slate-300 mb-2">Room Name</label>
                    <input
                      name="roomName"
                      type="text"
                      required
                      className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                      placeholder="Enter room name..."
                    />
                  </div>
                  <div className="mb-6">
                    <label className="flex items-center">
                      <input
                        name="isPrivate"
                        type="checkbox"
                        className="mr-2"
                      />
                      <span className="text-slate-300">Private room (password protected)</span>
                    </label>
                  </div>
                  <div className="flex space-x-3">
                    <button
                      type="button"
                      onClick={() => setShowCreateRoom(false)}
                      className="flex-1 px-4 py-2 bg-slate-700 text-slate-300 rounded-lg hover:bg-slate-600 transition-colors"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      className="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                    >
                      Create Room
                    </button>
                  </div>
                </form>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default RoomDiscovery;